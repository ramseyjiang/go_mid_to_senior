// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/unary.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhoneClient is the client API for Phone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneClient interface {
	// unary RPC
	GetContactName(ctx context.Context, in *GetContactNameRequest, opts ...grpc.CallOption) (*GetContactNameResponse, error)
	GetContactNum(ctx context.Context, in *GetContactNumRequest, opts ...grpc.CallOption) (*GetContactNumResponse, error)
	ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
}

type phoneClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneClient(cc grpc.ClientConnInterface) PhoneClient {
	return &phoneClient{cc}
}

func (c *phoneClient) GetContactName(ctx context.Context, in *GetContactNameRequest, opts ...grpc.CallOption) (*GetContactNameResponse, error) {
	out := new(GetContactNameResponse)
	err := c.cc.Invoke(ctx, "/pb.Phone/GetContactName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneClient) GetContactNum(ctx context.Context, in *GetContactNumRequest, opts ...grpc.CallOption) (*GetContactNumResponse, error) {
	out := new(GetContactNumResponse)
	err := c.cc.Invoke(ctx, "/pb.Phone/GetContactNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneClient) ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := c.cc.Invoke(ctx, "/pb.Phone/ListContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneServer is the server API for Phone service.
// All implementations should embed UnimplementedPhoneServer
// for forward compatibility
type PhoneServer interface {
	// unary RPC
	GetContactName(context.Context, *GetContactNameRequest) (*GetContactNameResponse, error)
	GetContactNum(context.Context, *GetContactNumRequest) (*GetContactNumResponse, error)
	ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error)
}

// UnimplementedPhoneServer should be embedded to have forward compatible implementations.
type UnimplementedPhoneServer struct {
}

func (UnimplementedPhoneServer) GetContactName(context.Context, *GetContactNameRequest) (*GetContactNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactName not implemented")
}
func (UnimplementedPhoneServer) GetContactNum(context.Context, *GetContactNumRequest) (*GetContactNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactNum not implemented")
}
func (UnimplementedPhoneServer) ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContacts not implemented")
}

// UnsafePhoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneServer will
// result in compilation errors.
type UnsafePhoneServer interface {
	mustEmbedUnimplementedPhoneServer()
}

func RegisterPhoneServer(s grpc.ServiceRegistrar, srv PhoneServer) {
	s.RegisterService(&Phone_ServiceDesc, srv)
}

func _Phone_GetContactName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServer).GetContactName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Phone/GetContactName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServer).GetContactName(ctx, req.(*GetContactNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phone_GetContactNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServer).GetContactNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Phone/GetContactNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServer).GetContactNum(ctx, req.(*GetContactNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phone_ListContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServer).ListContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Phone/ListContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServer).ListContacts(ctx, req.(*ListContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Phone_ServiceDesc is the grpc.ServiceDesc for Phone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Phone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Phone",
	HandlerType: (*PhoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContactName",
			Handler:    _Phone_GetContactName_Handler,
		},
		{
			MethodName: "GetContactNum",
			Handler:    _Phone_GetContactNum_Handler,
		},
		{
			MethodName: "ListContacts",
			Handler:    _Phone_ListContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/unary.proto",
}
