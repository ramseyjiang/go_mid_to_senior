// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/bidirectstream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhoneClient is the client API for Phone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneClient interface {
	// Bidirectional streaming RPC
	SendMsgBytes(ctx context.Context, opts ...grpc.CallOption) (Phone_SendMsgBytesClient, error)
}

type phoneClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneClient(cc grpc.ClientConnInterface) PhoneClient {
	return &phoneClient{cc}
}

func (c *phoneClient) SendMsgBytes(ctx context.Context, opts ...grpc.CallOption) (Phone_SendMsgBytesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Phone_ServiceDesc.Streams[0], "/pb.Phone/SendMsgBytes", opts...)
	if err != nil {
		return nil, err
	}
	x := &phoneSendMsgBytesClient{stream}
	return x, nil
}

type Phone_SendMsgBytesClient interface {
	Send(*SendMsgBytesRequest) error
	Recv() (*SendMsgBytesResponse, error)
	grpc.ClientStream
}

type phoneSendMsgBytesClient struct {
	grpc.ClientStream
}

func (x *phoneSendMsgBytesClient) Send(m *SendMsgBytesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *phoneSendMsgBytesClient) Recv() (*SendMsgBytesResponse, error) {
	m := new(SendMsgBytesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PhoneServer is the server API for Phone service.
// All implementations should embed UnimplementedPhoneServer
// for forward compatibility
type PhoneServer interface {
	// Bidirectional streaming RPC
	SendMsgBytes(Phone_SendMsgBytesServer) error
}

// UnimplementedPhoneServer should be embedded to have forward compatible implementations.
type UnimplementedPhoneServer struct {
}

func (UnimplementedPhoneServer) SendMsgBytes(Phone_SendMsgBytesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMsgBytes not implemented")
}

// UnsafePhoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneServer will
// result in compilation errors.
type UnsafePhoneServer interface {
	mustEmbedUnimplementedPhoneServer()
}

func RegisterPhoneServer(s grpc.ServiceRegistrar, srv PhoneServer) {
	s.RegisterService(&Phone_ServiceDesc, srv)
}

func _Phone_SendMsgBytes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PhoneServer).SendMsgBytes(&phoneSendMsgBytesServer{stream})
}

type Phone_SendMsgBytesServer interface {
	Send(*SendMsgBytesResponse) error
	Recv() (*SendMsgBytesRequest, error)
	grpc.ServerStream
}

type phoneSendMsgBytesServer struct {
	grpc.ServerStream
}

func (x *phoneSendMsgBytesServer) Send(m *SendMsgBytesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *phoneSendMsgBytesServer) Recv() (*SendMsgBytesRequest, error) {
	m := new(SendMsgBytesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Phone_ServiceDesc is the grpc.ServiceDesc for Phone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Phone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Phone",
	HandlerType: (*PhoneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMsgBytes",
			Handler:       _Phone_SendMsgBytes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/bidirectstream.proto",
}
