// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	// unary
	GreetUnary(ctx context.Context, in *GreetUnaryRequest, opts ...grpc.CallOption) (*GreetUnaryResponse, error)
	// server streaming
	GreetServerStreaming(ctx context.Context, in *GreetServerStreamingRequest, opts ...grpc.CallOption) (GreetService_GreetServerStreamingClient, error)
	// client streaming
	GreetClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetClientStreamingClient, error)
	// bidirectional streaming
	GreetBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetBidirectionalStreamingClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) GreetUnary(ctx context.Context, in *GreetUnaryRequest, opts ...grpc.CallOption) (*GreetUnaryResponse, error) {
	out := new(GreetUnaryResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/GreetUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetServerStreaming(ctx context.Context, in *GreetServerStreamingRequest, opts ...grpc.CallOption) (GreetService_GreetServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet.GreetService/GreetServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GreetServerStreamingClient interface {
	Recv() (*GreetServerStreamingResponse, error)
	grpc.ClientStream
}

type greetServiceGreetServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetServerStreamingClient) Recv() (*GreetServerStreamingResponse, error) {
	m := new(GreetServerStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/greet.GreetService/GreetClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetClientStreamingClient{stream}
	return x, nil
}

type GreetService_GreetClientStreamingClient interface {
	Send(*GreetClientStreamingRequest) error
	CloseAndRecv() (*GreetClientStreamingResponse, error)
	grpc.ClientStream
}

type greetServiceGreetClientStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetClientStreamingClient) Send(m *GreetClientStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetClientStreamingClient) CloseAndRecv() (*GreetClientStreamingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetClientStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/greet.GreetService/GreetBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetBidirectionalStreamingClient{stream}
	return x, nil
}

type GreetService_GreetBidirectionalStreamingClient interface {
	Send(*GreetBidirectionalStreamingRequest) error
	Recv() (*GreetBidirectionalStreamingResponse, error)
	grpc.ClientStream
}

type greetServiceGreetBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetBidirectionalStreamingClient) Send(m *GreetBidirectionalStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetBidirectionalStreamingClient) Recv() (*GreetBidirectionalStreamingResponse, error) {
	m := new(GreetBidirectionalStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations should embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	// unary
	GreetUnary(context.Context, *GreetUnaryRequest) (*GreetUnaryResponse, error)
	// server streaming
	GreetServerStreaming(*GreetServerStreamingRequest, GreetService_GreetServerStreamingServer) error
	// client streaming
	GreetClientStreaming(GreetService_GreetClientStreamingServer) error
	// bidirectional streaming
	GreetBidirectionalStreaming(GreetService_GreetBidirectionalStreamingServer) error
}

// UnimplementedGreetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) GreetUnary(context.Context, *GreetUnaryRequest) (*GreetUnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetUnary not implemented")
}
func (UnimplementedGreetServiceServer) GreetServerStreaming(*GreetServerStreamingRequest, GreetService_GreetServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetServerStreaming not implemented")
}
func (UnimplementedGreetServiceServer) GreetClientStreaming(GreetService_GreetClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetClientStreaming not implemented")
}
func (UnimplementedGreetServiceServer) GreetBidirectionalStreaming(GreetService_GreetBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetBidirectionalStreaming not implemented")
}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_GreetUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetUnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetUnary(ctx, req.(*GreetUnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GreetServerStreaming(m, &greetServiceGreetServerStreamingServer{stream})
}

type GreetService_GreetServerStreamingServer interface {
	Send(*GreetServerStreamingResponse) error
	grpc.ServerStream
}

type greetServiceGreetServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetServerStreamingServer) Send(m *GreetServerStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_GreetClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetClientStreaming(&greetServiceGreetClientStreamingServer{stream})
}

type GreetService_GreetClientStreamingServer interface {
	SendAndClose(*GreetClientStreamingResponse) error
	Recv() (*GreetClientStreamingRequest, error)
	grpc.ServerStream
}

type greetServiceGreetClientStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetClientStreamingServer) SendAndClose(m *GreetClientStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetClientStreamingServer) Recv() (*GreetClientStreamingRequest, error) {
	m := new(GreetClientStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetBidirectionalStreaming(&greetServiceGreetBidirectionalStreamingServer{stream})
}

type GreetService_GreetBidirectionalStreamingServer interface {
	Send(*GreetBidirectionalStreamingResponse) error
	Recv() (*GreetBidirectionalStreamingRequest, error)
	grpc.ServerStream
}

type greetServiceGreetBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetBidirectionalStreamingServer) Send(m *GreetBidirectionalStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetBidirectionalStreamingServer) Recv() (*GreetBidirectionalStreamingRequest, error) {
	m := new(GreetBidirectionalStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetUnary",
			Handler:    _GreetService_GreetUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetServerStreaming",
			Handler:       _GreetService_GreetServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GreetClientStreaming",
			Handler:       _GreetService_GreetClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetBidirectionalStreaming",
			Handler:       _GreetService_GreetBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
