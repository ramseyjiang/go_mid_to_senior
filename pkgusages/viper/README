What is Viper?
Viper is a complete configuration solution for Go applications including 12-Factor apps. It is designed to work within an application, and can handle all types of configuration needs and formats. It supports:

a. setting defaults
b. reading from JSON, TOML, YAML, HCL, envfile and Java properties config files
c. live watching and re-reading of config files (optional)
d. reading from environment variables
e. reading from remote config systems (etcd or Consul), and watching changes
f. reading from command line flags
g. reading from buffer
h. setting explicit values

Viper can be thought of as a registry for all of your applications configuration needs.


Why Viper?
When building a modern application, you don’t want to worry about configuration file formats; you want to focus on building awesome software. Viper is here to help with that.

Viper does the following for you:

1. Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, INI, envfile or Java properties formats.
2. Provide a mechanism to set default values for your different configuration options.
3. Provide a mechanism to set override values for options specified through command line flags.
4. Provide an alias system to easily rename parameters without breaking existing code.
5. Make it easy to tell the difference between when a user has provided a command line or config file which is the same as the default.


Viper uses the following precedence order. Each item takes precedence over the item below it:

a. explicit call to Set
b. flag
c. env
d. config
e. key/value store
f. default


Viper will read a config string (as JSON, TOML, YAML, HCL or envfile) retrieved from a path
in a Key/Value store such as etcd or Consul.


Getting Values From Viper
In Viper, there are a few ways to get a value depending on the value’s type. The following functions and methods exist:

Get(key string) : interface{}
GetBool(key string) : bool
GetFloat64(key string) : float64
GetInt(key string) : int
GetIntSlice(key string) : []int
GetString(key string) : string
GetStringMap(key string) : map[string]interface{}
GetStringMapString(key string) : map[string]string
GetStringSlice(key string) : []string
GetTime(key string) : time.Time
GetDuration(key string) : time.Duration
IsSet(key string) : bool
AllSettings() : map[string]interface{}

viper official docs links is https://github.com/spf13/viper/blob/master/README.md.